{"version":3,"sources":["utils/shuffleFunction.js","store/boardReducer.js","utils/formatTimeFunction.js","components/game/Stopwatch.jsx","components/game/SingleCard.jsx","components/game/Board.jsx","pages/GamePage.jsx","components/game/Settings.jsx","components/game/Win.jsx","components/Modal.jsx","App.js","store/index.js","index.js"],"names":["shuffle","array","i","length","j","Math","floor","random","boardReducer","createSlice","name","initialState","compare","cards","size","time","gameTime","isGameWin","cardsType","difficult","showModal","reducers","setOption","reducer","state","action","payload","type","value","prepare","generateCards","tempArr1","tempArr2","halfSize","push","id","nanoid","paths","path","clicked","done","concat","clearCards","setClicked","currentCards","newCards","map","c","filter","card","forEach","closeCards","actions","formatTime","minute","slice","second","Stopwatch","isGameStarted","useSelector","board","useState","setTime","dispatch","useDispatch","useEffect","ticks","setInterval","prevTime","clearInterval","className","SingleCard","cardsBack","cardTime","allowClick","setAllowClick","setTimeout","every","onClick","undefined","src","alt","Board","boardSize","diffClass","setDifClass","GamePage","setGameStart","disabled","Settings","inputEl","useRef","currentDifficult","currentCardsType","M","FormSelect","init","current","ref","defaultValue","onChange","e","target","dataset","setSettings","defaultChecked","Win","Modal","header","children","modalState","stopPropagation","App","setIsGameStarted","store","configureStore","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7ead44e.chunk.js","sourcesContent":["function shuffle(array) { // Тасование данных в массиве Фишера - Йетса\r\n   for (let i = array.length - 1; i > 0; i--) {\r\n      let j = Math.floor(Math.random() * (i + 1));\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n   }\r\n   return array\r\n}\r\n\r\nexport default shuffle","import { createSlice, nanoid } from \"@reduxjs/toolkit\"\r\nimport paths from '../data/pathsData.json'\r\nimport shuffle from \"../utils/shuffleFunction\"\r\n\r\nexport const boardReducer = createSlice({\r\n   name: 'board',\r\n   initialState: {\r\n      compare: [],\r\n      cards: [],\r\n      size: 12,\r\n      time: 1500,\r\n      gameTime: 0,\r\n      isGameWin: false,\r\n      cardsType: 'animals',\r\n      difficult: 'Лёгкая',\r\n      showModal: false\r\n   },\r\n   reducers: {\r\n      setOption: {\r\n         reducer(state, action) {\r\n            state[action.payload.type] = action.payload.value\r\n         },\r\n         prepare(type, value) {\r\n            return { payload: { type, value } }\r\n         }\r\n      },\r\n      generateCards: (state) => {\r\n         const tempArr1 = []\r\n         const tempArr2 = []\r\n         const type = state.cardsType\r\n         const halfSize = state.size / 2\r\n         for (let i = 0; i < halfSize; i++) {\r\n            tempArr1.push({ id: nanoid(), name: paths[type][i].name, path: paths[type][i].path, clicked: false, done: false })\r\n            tempArr2.push({ id: nanoid(), name: paths[type][i].name, path: paths[type][i].path, clicked: false, done: false })\r\n         }\r\n         state.cards = shuffle(tempArr1.concat(tempArr2))\r\n      },\r\n      clearCards: (state) => {\r\n         state.cards = []\r\n      },\r\n      setClicked: (state, action) => {\r\n         const currentCards = [...state.cards]\r\n         let newCards = currentCards.map(c => {\r\n            if (c.id !== action.payload) {\r\n               return c\r\n            }\r\n\r\n            if (!c.clicked) {\r\n               state.compare.push(c)\r\n               if (state.compare.length === 2) {\r\n                  if (state.compare[0].name === state.compare[1].name && state.compare[0].id !== state.compare[1].id) {\r\n                     const prevCards = currentCards.filter(card => card.name === c.name)\r\n                     prevCards.forEach(card => card.done = true)\r\n                  }\r\n                  state.compare = []\r\n               }\r\n            }\r\n            return { ...c, clicked: !c.clicked }\r\n         })\r\n         state.cards = newCards\r\n      },\r\n      closeCards: (state) => {\r\n         state.cards.forEach((c) => {\r\n            if (c.clicked === true && c.done === false) {\r\n               c.clicked = false\r\n            }\r\n            return c\r\n         })\r\n      }, showModal: (state, action) => {\r\n         state.showModal = action.payload\r\n      }\r\n   },\r\n\r\n})\r\nexport const { setOption, generateCards, clearCards, setClicked, closeCards, showModal } = boardReducer.actions\r\n\r\nexport default boardReducer.reducer","function formatTime(time) {\r\n   let minute = ('0' + Math.floor((time / 60000) % 60)).slice(-2)\r\n   let second = ('0' + Math.floor((time / 1000) % 60)).slice(-2)\r\n   return `${minute}:${second}`\r\n}\r\n\r\nexport default formatTime","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setOption, showModal } from '../../store/boardReducer'\r\nimport formatTime from '../../utils/formatTimeFunction'\r\n\r\nexport const Stopwatch = ({ isGameStarted }) => {\r\n   const isGameWin = useSelector(state => state.board.isGameWin)\r\n   const [time, setTime] = useState(0)\r\n   const dispatch = useDispatch()\r\n\r\n   useEffect(() => {\r\n      let ticks = null\r\n\r\n      if (isGameStarted && !isGameWin) {\r\n         ticks = setInterval(() => {\r\n            setTime(prevTime => prevTime + 10)\r\n         }, 10)\r\n      } else if (isGameWin && time > 0) {\r\n         dispatch(setOption('gameTime', time))\r\n         clearInterval(ticks)\r\n         dispatch(showModal(true))\r\n         setTime(0)\r\n      } else {\r\n         clearInterval(ticks)\r\n         setTime(0)\r\n      }\r\n      return () => clearInterval(ticks)\r\n   }, [time, isGameStarted, isGameWin, dispatch])\r\n\r\n\r\n\r\n   return (\r\n      <div className=\"stopwatch\">\r\n         {formatTime(time)}\r\n      </div>\r\n   )\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setOption, setClicked, closeCards } from '../../store/boardReducer'\r\n\r\nexport const SingleCard = () => {\r\n   const cards = useSelector(state => state.board.cards)\r\n   const cardsBack = useSelector(state => state.board.cardsType)\r\n   const cardTime = useSelector(state => state.board.time)\r\n   const dispatch = useDispatch()\r\n   const [allowClick, setAllowClick] = useState(true)\r\n\r\n   useEffect(() => {\r\n      const cardsToClose = cards.filter(c => c.clicked === true && c.done === false)\r\n      if (cardsToClose.length > 1) {\r\n         setAllowClick(false)\r\n         setTimeout(() => {\r\n            dispatch(closeCards())\r\n            setAllowClick(true)\r\n         }, cardTime)\r\n      }\r\n   }, [cards, cardTime, dispatch])\r\n\r\n   useEffect(() => {\r\n      if (cards.length > 0) {\r\n         const cardsEnd = cards.every(c => c.done === true)\r\n         if (cardsEnd) {\r\n            dispatch(setOption('isGameWin', true))\r\n         }\r\n      }\r\n   }, [cards, dispatch])\r\n\r\n   return (\r\n      <>\r\n         {cards.length !== 0 &&\r\n            cards.map(c => {\r\n               return (\r\n                  <div className={\"card card__wrapper \" + cardsBack} key={c.id}>\r\n                     <div\r\n                        className={`card__single card-${c.clicked ? 'opened' : 'closed'} card-${c.done ? 'done' : 'undone'}`}\r\n                        onClick={!c.done && allowClick ? () => dispatch(setClicked(c.id)) : undefined}\r\n                     >\r\n                        <div className=\"card__content card-front\">\r\n                        </div>\r\n                        <div className=\"card__content card-back\">\r\n                           <img src={c.path} alt=\"\" />\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               )\r\n            })}\r\n      </>\r\n   )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { SingleCard } from './SingleCard'\r\nimport { useSelector } from 'react-redux'\r\n\r\n\r\nexport const Board = () => {\r\n   const boardSize = useSelector((state) => state.board.cards)\r\n   const [diffClass, setDifClass] = useState('')\r\n\r\n   useEffect(() => {\r\n      const size = boardSize.length\r\n      if (size >= 0 && size < 13) {\r\n         setDifClass('easy')\r\n      } else if (size > 12 && size < 32)\r\n         setDifClass('medium')\r\n      else { setDifClass('hard') }\r\n   }, [diffClass, boardSize])\r\n\r\n   return (\r\n      <div className={`board ${diffClass}`}>\r\n         <SingleCard />\r\n      </div>\r\n   )\r\n}","import React from 'react'\r\nimport { Stopwatch } from '../components/game/Stopwatch'\r\nimport { Board } from '../components/game/Board'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { generateCards, clearCards, setOption, showModal } from '../store/boardReducer'\r\n\r\nconst GamePage = ({ isGameStarted, setGameStart }) => {\r\n   const dispatch = useDispatch()\r\n   const difficult = useSelector(state => state.board.difficult)\r\n\r\n   function startGame() {\r\n      dispatch(generateCards())\r\n      setGameStart(true)\r\n   }\r\n\r\n   function resetGame() {\r\n      dispatch(clearCards())\r\n      dispatch(setOption('isGameWin', false))\r\n      setGameStart(false)\r\n   }\r\n\r\n   return (\r\n      <div className=\"game container\">\r\n         <div className=\"game__info\">\r\n            <div className=\"game__controls\">\r\n               {!isGameStarted\r\n                  ? <button className=\"btn btn-primary btn-show-settings\" onClick={startGame}>Играть</button>\r\n                  : <button className=\"btn btn-primary btn-show-settings\" onClick={resetGame}>Остановить игру</button>\r\n               }\r\n               <button\r\n                  className=\"btn btn-primary btn-show-settings\"\r\n                  disabled={isGameStarted}\r\n                  onClick={() => dispatch(showModal(true))}\r\n               >Настройки</button>\r\n            </div>\r\n            <div className=\"game__difficult\">\r\n               Сложность: <span className=\"bold\">{difficult}</span>\r\n            </div>\r\n         </div>\r\n         <div className=\"game__stopwatch\">\r\n            <Stopwatch isGameStarted={isGameStarted} />\r\n            <div className=\"divider\"></div>\r\n         </div>\r\n         <div className=\"game__content row\">\r\n            <div className=\"game__board col s12\">\r\n               <Board />\r\n            </div>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default GamePage","import React, { useEffect, useRef } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setOption } from '../../store/boardReducer'\r\nimport M from 'materialize-css'\r\n\r\nconst Settings = () => {\r\n   const inputEl = useRef(null)\r\n   const dispatch = useDispatch()\r\n   const currentDifficult = useSelector(state => state.board.difficult)\r\n   const currentCardsType = useSelector(state => state.board.cardsType)\r\n\r\n   useEffect(() => {\r\n      M.FormSelect.init(inputEl.current)\r\n   }, [])\r\n\r\n   function setSettings(e) {\r\n      dispatch(setOption('size', e.target.dataset.size))\r\n      dispatch(setOption('time', e.target.dataset.time))\r\n      dispatch(setOption('difficult', e.target.value))\r\n   }\r\n\r\n\r\n   return (\r\n      <div className=\"settings\">\r\n         <div className=\"settings__select-cards row\">\r\n            <div className=\"settings__input input-field col s12\">\r\n               <select\r\n                  ref={inputEl}\r\n                  defaultValue={currentCardsType}\r\n                  className=\"settings__select icons\"\r\n                  onChange={(e) => dispatch(setOption('cardsType', e.target.value))}\r\n               >\r\n                  <option value=\"animals\" data-icon=\"assets/icons/animals-icon.jpg\">Животные</option>\r\n                  <option value=\"cards\" data-icon=\"assets/icons/cards-icon.jpg\">Игральные карты</option>\r\n               </select>\r\n               <label>Выберите тип карточек</label>\r\n            </div>\r\n         </div>\r\n         <div className=\"settings__select-diff\">\r\n            <div className=\"settings__label center\">\r\n               <h5>Выберите сложность</h5>\r\n            </div>\r\n            <div className=\"settings__form-diff row\">\r\n               <form onChange={(e) => setSettings(e)} className=\"col s12 m-l\">\r\n                  <div>\r\n                     <label>\r\n                        <input\r\n                           className=\"with-gap\"\r\n                           value=\"Лёгкая\"\r\n                           data-size=\"12\"\r\n                           data-time=\"1500\"\r\n                           type=\"radio\"\r\n                           name=\"difficult\"\r\n                           id=\"easy\"\r\n                           defaultChecked={currentDifficult === 'Лёгкая'} />\r\n                        <span>Лёгкая</span>\r\n                     </label>\r\n                  </div>\r\n                  <div>\r\n                     <label>\r\n                        <input\r\n                           className=\"with-gap\"\r\n                           value=\"Средняя\"\r\n                           data-size=\"24\"\r\n                           data-time=\"1000\"\r\n                           type=\"radio\"\r\n                           name=\"difficult\"\r\n                           id=\"medium\"\r\n                           defaultChecked={currentDifficult === 'Средняя'} />\r\n                        <span>Средняя</span>\r\n                     </label>\r\n                  </div>\r\n                  <div>\r\n                     <label>\r\n                        <input\r\n                           className=\"with-gap\"\r\n                           value=\"Высокая\"\r\n                           data-size=\"32\"\r\n                           data-time=\"600\"\r\n                           type=\"radio\"\r\n                           name=\"difficult\"\r\n                           id=\"hard\"\r\n                           defaultChecked={currentDifficult === 'Высокая'} />\r\n                        <span>Высокая</span>\r\n                     </label>\r\n                  </div>\r\n               </form>\r\n            </div>\r\n         </div >\r\n      </div >\r\n   )\r\n}\r\n\r\nexport default Settings","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { clearCards, generateCards, setOption, showModal } from '../../store/boardReducer'\r\nimport formatTime from '../../utils/formatTimeFunction'\r\n\r\nconst Win = () => {\r\n   const gameTime = useSelector(state => state.board.gameTime)\r\n   const dispatch = useDispatch()\r\n\r\n   function playAgain() {\r\n      dispatch(setOption('isGameWin', false))\r\n      dispatch(showModal(false))\r\n      dispatch(clearCards())\r\n      dispatch(generateCards())\r\n   }\r\n\r\n   return (\r\n      <div className=\"win\">\r\n         <div className=\"win__text center\">Вы победили!</div>\r\n         <div className=\"win__time\">Ваше время: <span className=\"bold\">{formatTime(gameTime)}</span></div>\r\n         <div className=\"win__button\">\r\n            <button className=\"btn btn-success\" onClick={playAgain}>Сыграть ещё</button>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default Win","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { showModal } from '../store/boardReducer'\r\n\r\nconst Modal = ({ header, children }) => {\r\n   const modalState = useSelector(state => state.board.showModal)\r\n   const dispatch = useDispatch()\r\n\r\n   return (\r\n      <> {modalState &&\r\n         <div className=\"modal\" onClick={() => dispatch(showModal(false))}>\r\n            <div className=\"modal__content\" onClick={(e) => e.stopPropagation()}>\r\n               <div className=\"modal__header\">\r\n                  <h4>{header}</h4>\r\n               </div>\r\n               <div className=\"modal__body\">\r\n                  {children}\r\n               </div>\r\n               <div className=\"modal__footer\">\r\n                  <button className=\"btn btn-primary\" onClick={() => dispatch(showModal(false))}>Закрыть</button>\r\n               </div>\r\n            </div>\r\n         </div>\r\n      }\r\n      </>\r\n   )\r\n}\r\n\r\nexport default Modal","import { useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport GamePage from './pages/GamePage'\nimport Settings from './components/game/Settings'\nimport Win from './components/game/Win'\nimport Modal from './components/Modal'\nimport './assets/scss/index.scss'\n// import M from 'materialize-css'\n\n\nexport default function App() {\n  const [isGameStarted, setIsGameStarted] = useState(false)\n  const isGameWin = useSelector(state => state.board.isGameWin)\n\n  const setGameStart = (value) => setIsGameStarted(value)\n\n\n  return (\n    <div className=\"App\">\n      <GamePage isGameStarted={isGameStarted} setGameStart={setGameStart} />\n      <Modal header={isGameWin ? 'Ура!' : 'Настройки'}>\n        {!isGameWin\n          ? <Settings />\n          : <Win />}\n      </Modal>\n    </div>\n  );\n}\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport boardReducer from './boardReducer'\r\n\r\nconst store = configureStore({\r\n   reducer: {\r\n      board: boardReducer\r\n   },\r\n   // devTools: false  -- перед деплоем я так понимаю надо это поставить, хотя не факт\r\n})\r\n\r\nwindow.store = store\r\n\r\nexport default store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport './index.css'\nimport App from './App'\nimport store from './store'\n// import reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}